{"ast":null,"code":"/*\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst TicketPage = () => {\n  const { id } = useParams();\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTickets = async () => {\n      try {\n        // Fetch tickets for the specific domain\n        const response = await fetch(`/api/tickets/${id}`); // Adjust URL as needed\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setTickets(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTickets();\n  }, [id]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error}</p>;\n\n  return (\n    <div>\n      <h1>Tickets for Domain: {id}</h1>\n      <ul>\n        {tickets.map((ticket) => (\n          <li key={ticket._id}>\n            <h2>{ticket.title}</h2>\n            <p>{ticket.description}</p>\n            <p>Severity: {ticket.severity}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TicketPage;\n*/","map":{"version":3,"names":[],"sources":["/Users/shahab/Desktop/Projects/finalticketingapp/frontend/src/pages/TicketPage.js"],"sourcesContent":["/*\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst TicketPage = () => {\n  const { id } = useParams();\n  const [tickets, setTickets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTickets = async () => {\n      try {\n        // Fetch tickets for the specific domain\n        const response = await fetch(`/api/tickets/${id}`); // Adjust URL as needed\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setTickets(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTickets();\n  }, [id]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error}</p>;\n\n  return (\n    <div>\n      <h1>Tickets for Domain: {id}</h1>\n      <ul>\n        {tickets.map((ticket) => (\n          <li key={ticket._id}>\n            <h2>{ticket.title}</h2>\n            <p>{ticket.description}</p>\n            <p>Severity: {ticket.severity}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TicketPage;\n*/\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}